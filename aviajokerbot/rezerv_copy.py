import logging
from aiogram import Bot, Dispatcher, types, executor
from aiogram.dispatcher.filters import BoundFilter
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.types import ReplyKeyboardMarkup, InlineKeyboardMarkup, InlineKeyboardButton

from config import TOKEN
from db_main import db_start, create_author_profile, create_subscriber_profile

logging.basicConfig(level=logging.INFO)

bot = Bot(token=TOKEN)
storage = MemoryStorage()
dp = Dispatcher(bot, storage=storage)


async def on_startup(_):
    await db_start()


class UserStates(StatesGroup):
    AUTHOR = State()
    SUBSCRIBER = State()


help_kb = InlineKeyboardMarkup(row_width=2)
yes_btn = InlineKeyboardButton(text='–î–∞', callback_data='–û—Ç–ª–∏—á–Ω–æ')
no_btn = InlineKeyboardButton(text='–ù–µ—Ç', callback_data='–ù—É–∂–Ω–∞ –ø–æ–º–æ—â—å')
help_kb.row(yes_btn, no_btn)

need_help_kb = InlineKeyboardMarkup()
need_help_btn = InlineKeyboardButton(text='–ù–∞–∂–º–∏—Ç–µ', url='https://www.google.ru/')
need_help_kb.add(need_help_btn)


@dp.callback_query_handler(text='–û—Ç–ª–∏—á–Ω–æ', state=UserStates.SUBSCRIBER)
async def help_yes(callback: types.CallbackQuery):
    await callback.message.answer('–û—Ç–ª–∏—á–Ω–æ!')


@dp.callback_query_handler(text='–ù—É–∂–Ω–∞ –ø–æ–º–æ—â—å', state=UserStates.SUBSCRIBER)
async def help_no(callback: types.CallbackQuery):
    await callback.message.answer(
        '–ß—Ç–æ-—Ç–æ –Ω–µ —Ç–∞–∫? –ü–æ–º–æ—â—å —Ä—è–¥–æ–º. –ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –∏ —Ä–∞—Å—Å–∫–∞–∂–∏—Ç–µ, —á—Ç–æ —Å–ª—É—á–∏–ª–æ—Å—å.',
        reply_markup=need_help_kb
    )


def get_keyboard(user=None):
    keyboard = ReplyKeyboardMarkup(resize_keyboard=True)
    if user == 'SUBSCRIBER':
        buttons = [
            'üë®‚Äçüé® –ê–≤—Ç–æ—Ä',
            'üï∞ –ò—Å—Ç–æ—Ä–∏—è',
            '‚ùì –ü–æ–º–æ—â—å',
            'üí∞ –ü–æ—Å—Ç—ã',
            'üóì –ü–æ–¥–ø–∏—Å–∫–∏'
        ]

        keyboard.row(buttons[0], buttons[1])
        keyboard.row(buttons[2], buttons[3], buttons[4])
    else:
        buttons = [
            'üòé –ü–æ–¥–ø–∏—Å—á–∏–∫',
            'üôè –ì–∏–¥',
            '‚ùì FAQ',
            'üí¨ –ü–æ–¥–¥–µ—Ä–∂–∫–∞',
        ]

        keyboard.row(buttons[0], buttons[1])
        keyboard.row(buttons[2], buttons[3])

    return keyboard


async def switch_sub(message):
    await message.answer(
        '–í—ã –ø–æ–º–µ–Ω—è–ª–∏ —Ä–µ–∂–∏–º: —Ç–µ–ø–µ—Ä—å –≤—ã –∞–≤—Ç–æ—Ä –∫–∞–Ω–∞–ª–∞. '
        '–í–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –∫–æ–º–∞–Ω–¥–æ–π /guide —á—Ç–æ–±—ã –ø–µ—Ä–µ–π—Ç–∏ –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–π —à–∞–≥.',
        reply_markup=get_keyboard()
    )
    await UserStates.AUTHOR.set()


async def switch_author(message):
    await message.answer(
        '–í—ã –ø–æ–º–µ–Ω—è–ª–∏ —Ä–µ–∂–∏–º: —Ç–µ–ø–µ—Ä—å –≤—ã –ø–æ–¥–ø–∏—Å—á–∏–∫ –∏ –º–æ–∂–µ—Ç–µ –ø—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞—Ç—å '
        '–≤–∞—à—É –∏—Å—Ç–æ—Ä–∏—é –¥–æ–Ω–∞—Ç–æ–≤ –∞–≤—Ç–æ—Ä–∞–º —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã /history '
        '–∏–ª–∏ –Ω–∞–ø–∏—Å–∞—Ç—å –Ω–∞–º –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É —á–µ—Ä–µ–∑ –∫–æ–º–∞–Ω–¥—É /support. '
        '–ï—Å–ª–∏ –≤—ã –∞–≤—Ç–æ—Ä –∫–∞–Ω–∞–ª–∞ –∏ —Ö–æ—Ç–∏—Ç–µ –ø–æ–ª—É—á–∞—Ç—å –¥–æ–Ω–∞—Ç—ã –æ—Ç —á–∏—Ç–∞—Ç–µ–ª–µ–π, '
        '–ø–æ–º–µ–Ω—è–π—Ç–µ —Ä–µ–∂–∏–º –µ—â—ë —Ä–∞–∑ —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã /switch_role.',
        reply_markup=get_keyboard('SUBSCRIBER')
    )

    await UserStates.SUBSCRIBER.set()


@dp.message_handler(commands=['start'])
async def start(message: types.Message):
    await create_subscriber_profile(subscriber_id=message.from_user.id)

    await message.answer(
        f"–û—Ç–ª–∏—á–Ω–æ! –ú—ã —Ä–∞–¥—ã, —á—Ç–æ –≤—ã —Å –Ω–∞–º–∏. "
        f"–°–µ–π—á–∞—Å –≤—ã –ø–æ–¥–ø–∏—Å—á–∏–∫ –∏ –º–æ–∂–µ—Ç–µ –ø—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞—Ç—å –≤–∞—à—É –∏—Å—Ç–æ—Ä–∏—é –¥–æ–Ω–∞—Ç–æ–≤ –∞–≤—Ç–æ—Ä–∞–º "
        f"—Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã /history –∏–ª–∏ –Ω–∞–ø–∏—Å–∞—Ç—å –Ω–∞–º –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É —á–µ—Ä–µ–∑ –∫–æ–º–∞–Ω–¥—É /support. "
        f"–ï—Å–ª–∏ –≤—ã –∞–≤—Ç–æ—Ä –∫–∞–Ω–∞–ª–∞ –∏ —Ö–æ—Ç–∏—Ç–µ –ø–æ–ª—É—á–∞—Ç—å –¥–æ–Ω–∞—Ç—ã –æ—Ç —á–∏—Ç–∞—Ç–µ–ª–µ–π, "
        f"–ø–æ–º–µ–Ω—è–π—Ç–µ —Ä–µ–∂–∏–º –µ—â—ë —Ä–∞–∑ —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã /switch_role.",
        reply_markup=get_keyboard('SUBSCRIBER')
    )
    await UserStates.SUBSCRIBER.set()


@dp.message_handler(commands=['switch_role'], state=UserStates.SUBSCRIBER)
async def switch_role_sub(message: types.Message):
    await switch_sub(message=message)


@dp.message_handler(commands=['switch_role'], state=UserStates.AUTHOR)
async def switch_role_autor(message: types.Message):
    await switch_author(message=message)


@dp.message_handler(content_types=types.ContentTypes.TEXT, state=UserStates.SUBSCRIBER)
async def handle_message_subscriber(message: types.Message):
    if message.text == 'üë®‚Äçüé® –ê–≤—Ç–æ—Ä':
        await switch_sub(message=message)
    elif message.text == 'üí∞ –ü–æ—Å—Ç—ã':
        await message.answer(
            '–í—ã –Ω–µ —Å–æ–≤–µ—Ä—à–∞–ª–∏ –ø–ª–∞—Ç–µ–∂–µ–π.'
        )
    elif message.text in ['üóì –ü–æ–¥–ø–∏—Å–∫–∏', '/subscriptions']:
        await message.answer(
            '–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–¥–ø–∏—Å–æ–∫.'
        )
    elif message.text == '‚ùì –ü–æ–º–æ—â—å':
        await message.answer(
            '–í–æ—Ç –Ω–µ—Å–∫–æ–ª—å–∫–æ –ø–æ–ª–µ–∑–Ω—ã—Ö –∫–æ–º–∞–Ω–¥: '
            '/history –æ—Ç–∫—Ä—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –≤–∞—à–∏—Ö –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö –ø–ª–∞—Ç–µ–∂–µ–π. '
            '/subscriptions –ø–æ–∑–≤–æ–ª—è–µ—Ç —É–ø—Ä–∞–≤–ª—è—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–º–∏ –ø–æ–¥–ø–∏—Å–∫–∞–º–∏. '
            '/switch_role –º–µ–Ω—è–µ—Ç –≤–∞—à —Ä–µ–∂–∏–º –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å –±–æ—Ç–æ–º. '
        )

        await message.answer(
            '–í—ã –Ω–∞—à–ª–∏ —Ç–æ, —á—Ç–æ –∏—Å–∫–∞–ª–∏?',
            reply_markup=help_kb
        )
    elif message.text in ['üï∞ –ò—Å—Ç–æ—Ä–∏—è', '/history']:
        await message.answer(
            '–ö–æ–º—É –≤—ã –æ—Ç–ø—Ä–∞–≤–ª—è–ª–∏ –¥–µ–Ω—å–≥–∏ \n \n–í—ã –µ—â—ë –Ω–∏–∫–æ–º—É –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è–ª–∏ –¥–µ–Ω—å–≥–∏.'
        )
    elif message.text == '/support':
        await message.answer(
            '–ß—Ç–æ-—Ç–æ –Ω–µ —Ç–∞–∫? –ü–æ–º–æ—â—å —Ä—è–¥–æ–º. –ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –∏ —Ä–∞—Å—Å–∫–∞–∂–∏—Ç–µ, —á—Ç–æ —Å–ª—É—á–∏–ª–æ—Å—å.',
            reply_markup=need_help_kb
        )


@dp.message_handler(content_types=types.ContentTypes.TEXT, state=UserStates.AUTHOR)
async def handle_message_author(message: types.Message):
    if message.text == 'üòé –ü–æ–¥–ø–∏—Å—á–∏–∫':
        await switch_author(message=message)
    elif message.text in ['üôè –ì–∏–¥', '/guide']:
        await message.answer(
            '–û—Ç–∫—Ä–æ–π—Ç–µ –≤–∞—à –∫–∞–Ω–∞–ª > –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∫–∞–Ω–∞–ª > –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã > –î–æ–±–∞–≤–∏—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ @DonCriptBot '
            '–∏ –¥–∞—Ç—å –µ–º—É –ø—Ä–∞–≤–∞ –ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è –∏ —É–¥–∞–ª—è—Ç—å —á—É–∂–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è. '
            '–ë–æ—Ç –Ω–µ –±—É–¥–µ—Ç –Ω–∏—á–µ–≥–æ –ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å –∏ —É–¥–∞–ª—è—Ç—å –±–µ–∑ –≤–∞—à–µ–≥–æ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è.'
        )
        await message.reply(str(message.new_chat_members))
    elif message.text == '‚ùì FAQ':
        await message.answer(
            '‚Ä¢ –ö–∞–∫ —Å–æ–∑–¥–∞—Ç—å –∫–Ω–æ–ø–∫—É "–ü–æ–∂–µ—Ä—Ç–≤–æ–≤–∞—Ç—å"? \n'
            '‚Ä¢ –ö–∞–∫ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫–∏? \n'
            '‚Ä¢ –ö–∞–∫ —Å–æ–∑–¥–∞—Ç—å –∏–Ω–≤–æ–π—Å? \n'
            '‚Ä¢ –ö–∞–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç –∏–Ω–≤–æ–π—Å? \n'
            '‚Ä¢ –ß—Ç–æ –µ—â–µ –∑–∞ –∫–æ–º–∏—Å—Å–∏–∏ –∏ –ª–∏–º–∏—Ç—ã? \n'
            '‚Ä¢ –ö–∞–∫ —è –º–æ–≥—É –ø–æ–ª—É—á–∏—Ç—å —Å–≤–æ–∏ –¥–µ–Ω—å–≥–∏? \n'
            '‚Ä¢ –ö–∞–∫–∏–µ –µ—Å—Ç—å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –¥–ª—è –∫–æ–Ω—Ç–µ–Ω—Ç–∞? \n'
            '‚Ä¢ –ö–∞–∫ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –±–æ—Ç? \n'
            '\n'
            '/guide —Å–æ—Ä–∏–µ–Ω—Ç–∏—Ä—É–µ—Ç –≤–∞—Å –ø–æ –ø—Ä–æ—Ü–µ—Å—Å—É –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ —Å–µ—Ä–≤–∏—Å—É. \n'
            '/my_profile –æ—Ç–∫—Ä—ã–≤–∞–µ—Ç —Å—Ç—Ä–∞–Ω–∏—Ü—É —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ –∏ –ø–æ–∑–≤–æ–ª—è–µ—Ç –∏—Ö –∏–∑–º–µ–Ω–∏—Ç—å. '
            '–í—ã —Ç–∞–∫–∂–µ –º–æ–∂–µ—Ç–µ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –≤–∞—à –±–∞–ª–∞–Ω—Å —Å –ø–æ–º–æ—â—å—é —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã. \n'
            '/status –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≤–∞—à —Ç–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å. \n'
            '/support –ø–æ–º–æ–∂–µ—Ç —Å–≤—è–∑–∞—Ç—å—Å—è —Å –Ω–∞—à–µ–π —Å–ª—É–∂–±–æ–π –ø–æ–¥–¥–µ—Ä–∂–∫–∏. \n'
            '/switch_role –ø–æ–∑–≤–æ–ª—è–µ—Ç –∏–∑–º–µ–Ω–∏—Ç—å —Ä–µ–∂–∏–º –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å –±–æ—Ç–æ–º. \n'
            '/channels –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∫–∞–Ω–∞–ª—ã, –≤ –∫–æ—Ç–æ—Ä—ã–µ –≤—ã –¥–æ–±–∞–≤–∏–ª–∏ –±–æ—Ç. \n'
        )
    elif message.text in ['üí¨ –ü–æ–¥–¥–µ—Ä–∂–∫–∞', '/support']:
        await message.answer(
            '–ß—Ç–æ-—Ç–æ –Ω–µ —Ç–∞–∫? –ü–æ–º–æ—â—å —Ä—è–¥–æ–º. –ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –∏ —Ä–∞—Å—Å–∫–∞–∂–∏—Ç–µ, —á—Ç–æ —Å–ª—É—á–∏–ª–æ—Å—å.',
            reply_markup=need_help_kb
        )
    elif message.text == '/status':
        await message.answer(
            '–í–∞—à —Å—Ç–∞—Ç—É—Å: –ê–∫—Ç–∏–≤–µ–Ωüëå'
        )
    elif message.text == '/my_profile':
        await message.answer(
            '–í–∞—à–∏ –∞–∫—Ç–∏–≤–Ω—ã–µ –∫–∞–Ω–∞–ª—ã: \n"Test" \n–ë–∞–ª–∞–Ω—Å: 0'
        )
    elif message.text == '/channels':
        await message.answer(
            '–í–∞—à–∏ –∞–∫—Ç–∏–≤–Ω—ã–µ –∫–∞–Ω–∞–ª—ã: \n"Test"'
        )


@dp.my_chat_member_handler()
async def on_bot_added_to_channel(update: types.ChatMemberUpdated):
    if update.from_user.is_bot and update.new_chat_member.status == "administrator":
        user_state = await dp.storage.get_data(user=update.from_user.id)
        if user_state.get("state") == UserStates.AUTHOR:
            channel_title = update.chat.title
            await update.bot.send_message(update.chat.id, f"–ë–æ—Ç –±—ã–ª –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∫–∞–Ω–∞–ª: {channel_title}")


if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True, on_startup=on_startup)
